tosca_definitions_version: tosca_simple_yaml_1_3

metadata:
  targetNamespace: "iaas.blueprints.aws"
topology_template:
  node_templates:
    AwsS3Bucket_0:
      type: iaas.nodes.aws.AwsS3Bucket
      metadata:
        x: "1382"
        y: "194"
        displayName: "OpenAQOutputBucket"
      properties:
        size: "0 MB"
        name: "openaq-case-study"
        maxsize: 5000
      requirements:
        - host:
            node: AwsPlatform_0
            relationship: con_HostedOn_5
            capability: host
        - invoker:
            node: AwsLambdaFunction_4
            relationship: con_AwsS3Triggers_0
            capability: invocable
    AwsPlatform_0:
      type: iaas.nodes.aws.AwsPlatform
      metadata:
        x: "1416"
        y: "682"
        displayName: "AwsPlatform"
      properties:
        name: "AWS"
        region: "eu-central-1"
    AwsSQSQueue_0:
      type: iaas.nodes.aws.AwsSQSQueue
      metadata:
        x: "1925"
        y: "474"
        displayName: "NotificationQ"
      properties:
        name: "NotificationQ"
      requirements:
        - host:
            node: AwsPlatform_0
            relationship: con_HostedOn_7
            capability: host
    AwsSFOrchestration_0:
      type: iaas.nodes.aws.AwsSFOrchestration
      metadata:
        x: "502"
        y: "254"
        displayName: "AwsSFOrchestration"
      properties:
        state_machine: { get_artifact: [ SELF, ETL ] }
        name: "ETL_OpenAQ"
        schedule_expression: "rate(5 minutes)"
      requirements:
        - host:
            node: AwsPlatform_0
            relationship: con_HostedOn_0
            capability: host
        - orchestrator:
            node: AwsLambdaFunction_0
            relationship: con_AwsSFOrchestrates_0
            capability: orchestrated
        - orchestrator:
            node: AwsLambdaFunction_1
            relationship: con_AwsSFOrchestrates_1
            capability: orchestrated
        - orchestrator:
            node: AwsLambdaFunction_2
            relationship: con_AwsSFOrchestrates_2
            capability: orchestrated
        - orchestrator:
            node: AwsLambdaFunction_3
            relationship: con_AwsSFOrchestrates_3
            capability: orchestrated
      artifacts:
        ETL:
          type: tosca.artifacts.File
          file: ETL.asl
    AwsLambdaFunction_0:
      type: iaas.nodes.aws.AwsLambdaFunction
      metadata:
        x: "967"
        y: "112"
        displayName: "ListFiles"
      properties:
        handler: "__main__.main"
        memory: 128
        name: "ListFiles"
        layers: []
        runtime: "python3.8"
        alias: "dev"
        statement_id: "listfiles-statement"
        zip_file: { get_artifact: [ SELF, ListFiles ] }
        timeout: 300
        env_vars: {}
      requirements:
        - host:
            node: AwsPlatform_0
            relationship: con_HostedOn_4
            capability: host
      artifacts:
        ListFiles:
          type: iaas.artifacts.Zip
          file: ListFiles.zip
    AwsLambdaFunction_1:
      type: iaas.nodes.aws.AwsLambdaFunction
      metadata:
        x: "967"
        y: "211"
        displayName: "TransformData"
      properties:
        handler: "__main__.main"
        memory: 1024
        name: "TransformData"
        layers:
          - "arn:aws:lambda:eu-central-1:770693421928:layer:Klayers-python38-numpy:18"
          - "arn:aws:lambda:eu-central-1:770693421928:layer:Klayers-python38-pandas:35"
        runtime: "python3.8"
        alias: "dev"
        statement_id: "transform-statement"
        schedule_expression: "none"
        zip_file: { get_artifact: [ SELF, TransformData ] }
        timeout: 600
        env_vars:
          RESULTS_BUCKET: "openaq-case-study"
      requirements:
        - endpoint:
            node: AwsS3Bucket_0
            relationship: con_ConnectsTo_0
            capability: storage_endpoint
        - host:
            node: AwsPlatform_0
            relationship: con_HostedOn_3
            capability: host
      artifacts:
        TransformData:
          type: iaas.artifacts.Zip
          file: TransformData.zip
    AwsLambdaFunction_2:
      type: iaas.nodes.aws.AwsLambdaFunction
      metadata:
        x: "972"
        y: "307"
        displayName: "AggregateData"
      properties:
        handler: "__main__.main"
        memory: 512
        name: "AggregateData"
        layers:
          - "arn:aws:lambda:eu-central-1:770693421928:layer:Klayers-python38-numpy:18"
          - "arn:aws:lambda:eu-central-1:770693421928:layer:Klayers-python38-pandas:35"
        runtime: "python3.8"
        alias: "dev"
        statement_id: "aggregate-statement"
        schedule_expression: "none"
        zip_file: { get_artifact: [ SELF, AggregateData ] }
        timeout: 300
        env_vars:
          RESULTS_BUCKET: "openaq-case-study"
      requirements:
        - endpoint:
            node: AwsS3Bucket_0
            relationship: con_ConnectsTo_1
            capability: storage_endpoint
        - host:
            node: AwsPlatform_0
            relationship: con_HostedOn_2
            capability: host
      artifacts:
        AggregateData:
          type: iaas.artifacts.Zip
          file: AggregateData.zip
    AwsLambdaFunction_3:
      type: iaas.nodes.aws.AwsLambdaFunction
      metadata:
        x: "966"
        y: "412"
        displayName: "CleanUp"
      properties:
        handler: "__main__.main"
        memory: 128
        name: "CleanUp"
        layers: []
        runtime: "python3.8"
        alias: "dev"
        statement_id: "cleanup-statement"
        schedule_expression: "none"
        zip_file: { get_artifact: [ SELF, CleanUp ] }
        timeout: 300
        env_vars:
          RESULTS_BUCKET: "openaq-case-study"
      requirements:
        - endpoint:
            node: AwsS3Bucket_0
            relationship: con_ConnectsTo_2
            capability: storage_endpoint
        - host:
            node: AwsPlatform_0
            relationship: con_HostedOn_1
            capability: host
      artifacts:
        CleanUp:
          type: iaas.artifacts.Zip
          file: CleanUp.zip
    AwsLambdaFunction_4:
      type: iaas.nodes.aws.AwsLambdaFunction
      metadata:
        x: "1655"
        y: "331"
        displayName: "Notify"
      properties:
        handler: "__main__.main"
        memory: 128
        name: "Notify"
        layers: []
        runtime: "python3.8"
        alias: "dev"
        statement_id: "notify-statement"
        schedule_expression: "none"
        zip_file: { get_artifact: [ SELF, Notify ] }
        timeout: 300
        env_vars:
          QUEUE_NAME: "NotificationQ"
          REGION: "eu-central-1"
      requirements:
        - endpoint:
            node: AwsSQSQueue_0
            relationship: con_ConnectsTo_3
            capability: queue_endpoint
        - host:
            node: AwsPlatform_0
            relationship: con_HostedOn_6
            capability: host
      artifacts:
        Notify:
          type: iaas.artifacts.Zip
          file: Notify.zip
  relationship_templates:
    con_HostedOn_2:
      type: tosca.relationships.HostedOn
    con_HostedOn_3:
      type: tosca.relationships.HostedOn
    con_HostedOn_0:
      type: tosca.relationships.HostedOn
    con_HostedOn_1:
      type: tosca.relationships.HostedOn
    con_AwsSFOrchestrates_3:
      type: iaas.relationships.aws.AwsSFOrchestrates
    con_AwsSFOrchestrates_2:
      type: iaas.relationships.aws.AwsSFOrchestrates
    con_AwsSFOrchestrates_1:
      type: iaas.relationships.aws.AwsSFOrchestrates
    con_AwsSFOrchestrates_0:
      type: iaas.relationships.aws.AwsSFOrchestrates
    con_HostedOn_6:
      type: tosca.relationships.HostedOn
    con_HostedOn_7:
      type: tosca.relationships.HostedOn
    con_HostedOn_4:
      type: tosca.relationships.HostedOn
    con_HostedOn_5:
      type: tosca.relationships.HostedOn
    con_ConnectsTo_2:
      type: tosca.relationships.ConnectsTo
    con_ConnectsTo_3:
      type: tosca.relationships.ConnectsTo
    con_ConnectsTo_0:
      type: tosca.relationships.ConnectsTo
    con_ConnectsTo_1:
      type: tosca.relationships.ConnectsTo
    con_AwsS3Triggers_0:
      type: iaas.relationships.aws.AwsS3Triggers
      properties:
        event_name: "onCreate"
        events: "s3:ObjectCreated:*"
